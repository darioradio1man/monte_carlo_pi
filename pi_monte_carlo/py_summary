Для решения задчи вычисления числа пи c помощью метода Монте Карло
на языке программирования Python (использовалась версия 3.11) было принято решение 
использовать библиотеки multithreading и multiprocessing. Вместо библиотек math и random,
отвечающие за математические операции (операция взятие квадратного корня) и 
выбор случайного числа от 0 и 1, было принято решение использовать библиотекой numpy, 
так как он более производительный в плане работы с математикой.

Для начала использовалась многопоточность (файл pi_monte_carlo_multithreading.py), все потоки выполняются в 1 процессе.
Несмотря на то, что при многопоточности низкие затраты(GIL), общая память при увеличении 
количества точек увеличивается время выполнения задачи (примерно при увеличении количество точек в 10 раз время 
так же увеличилась в 10 раз)

В многопроцессорности (файл pi_monte_carlo_multiprocessing.py) используется следующий принцип - 1 процесс - 1 интерпретатор, 
из-за этого затраты на ресурсы более высокие, но не смотря на это, время выполнения
уменьшалось в связи с увеличением количества процесса. Если при количестве процессов, равном 1 - результаты по времени 
совпадали с многопотчным подходом, то при 2, 4, 8 - время выполнения(в секундах) сокращалась соответственно в 0.67, 2, 4 раза 

Данные результаты можно увидеть в 2-х файлах: results.csv, где записаны результаты многопоточного подхода,
и pi_calculating_in_multiprocessing.csv, где записаны результаты многопроцессорного подхода.
